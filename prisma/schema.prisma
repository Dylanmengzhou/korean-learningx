generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// *
///  * 用户表 (与 NextAuth 兼容)
model User {
  id                     Int                    @id @default(autoincrement())
  email                  String?                @unique
  password               String?
  name                   String?
  createdAt              DateTime               @default(now())
  image                  String                 @default("https://robohash.org/c143b89fb9077cdd6fd77269a7bfefb5?set=set4&bgset=&size=400x400")
  membershipType         String                 @default("free")
  userDictationRecords   UserDictationRecord[]
  userPracticeProgresses UserPracticeProgress[]
  userWordProgresses     UserWordProgress[]
}

/// *
///  * 公共单词表 (不含用户私有字段)
model WordYonsei {
  id                 Int                @id @default(autoincrement())
  korean             String
  type               String
  phrase             String?
  phraseCn           String?
  example            String?
  exampleCn          String?
  chinese            String
  volume             Int
  bookSeries         String
  chapter            Int?
  createdAt          DateTime           @default(now())
  userWordProgresses UserWordProgress[]
}

model UserDictationRecord {
  id        Int      @id @default(autoincrement())
  userId    Int
  accuracy  Float
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

/// *
///  * 用户单词进度表
///  * - 记录用户(userId) 对某条公共单词(wordId) 的专属状态
///  * - 通过 userId, wordId 组成唯一性，防止重复记录
model UserWordProgress {
  id              Int        @id @default(autoincrement())
  userId          Int
  wordId          Int
  status          Int        @default(0)
  dictationStatus Int        @default(0)
  createdAt       DateTime   @default(now())
  user            User       @relation(fields: [userId], references: [id])
  word            WordYonsei @relation(fields: [wordId], references: [id])

  @@unique([userId, wordId])
}

/// *
///  * 公共练习表（Yonsei Practice 题库）
///  * 只存放与题目本身有关的静态信息：
///  * - id:            练习主键
///  * - type:          题型（填空 / 听力 / 简答 …）
///  * - data:          题干、选项、音频地址等，建议用 Json 保存
///  * - createdAt:     创建时间
model PracticeYonsei {
  id                     Int                    @id @default(autoincrement())
  type                   String
  data                   Json
  createdAt              DateTime               @default(now())
  chapter                Int?
  level                  Int?
  userPracticeProgresses UserPracticeProgress[]
}

/// *
///  * 用户练习进度表
///  * 记录某用户(userId) 对某练习题(practiceId) 的专属状态
///  * - status:   做题状态（0 未开始，1 正确，-1 错误 … 自行约定）
///  * - isSave:   用户是否把这道题收藏/保存
///  * 复合唯一索引避免同一用户对同一题出现多条记录
model UserPracticeProgress {
  id         Int            @id @default(autoincrement())
  userId     Int
  practiceId Int
  status     Int            @default(0)
  isSave     Boolean        @default(false)
  createdAt  DateTime       @default(now())
  practice   PracticeYonsei @relation(fields: [practiceId], references: [id])
  user       User           @relation(fields: [userId], references: [id])

  @@unique([userId, practiceId])
}
